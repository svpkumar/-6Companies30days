//*** Leetcode-2385 Amount of Time for Binary Tree to Be Infected ***//
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void makeGraph(unordered_map<int,vector<int>> &adj,int parent,TreeNode* curr){
        if(curr == nullptr){
            return;
        }

        if(parent != -1){
            adj[curr->val].push_back(parent);
        }

        if(curr->left){
            adj[curr->val].push_back(curr->left->val);
        }

        if(curr->right){
            adj[curr->val].push_back(curr->right->val);
        }

        makeGraph(adj,curr->val,curr->left);
        makeGraph(adj,curr->val,curr->right);
    }
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<int,vector<int>> adj;
        makeGraph(adj,-1,root);

        //BFS code
        unordered_set<int> visited;
        queue<int> que;
        visited.insert(start);
        que.push(start);

        int minutes = 0;

        while(!que.empty()){
            int n=que.size();
            while(n--){
                int ele = que.front();
                que.pop();
                for(auto &nbr:adj[ele]){
                    if(visited.find(nbr) == visited.end()){
                        que.push(nbr);
                        visited.insert(nbr);
                    }
                }
            }
            minutes++;
        }
        return minutes-1;
    }
};
